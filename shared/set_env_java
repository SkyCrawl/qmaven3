#!/bin/bash

# TODO - options:
# 1) -q <name> ... the target QPKG name (if not recognized, an error is thrown)
# 2) -p <path> ... force the given path (no error, even if not recognized)

#
# Useful notes:
# - This script is called from /etc/profile so use the 'return' command instead of the 'exit' command!
# - See also: https://stackoverflow.com/a/9640736
#

#
# COMMON PREREQUISITES
#

# vital variables for the function of this script
QPKG_CONF="/etc/config/qpkg.conf"
QPKG_NAME="QMaven3"
QPKG_INSTALL_PATH="$(/sbin/getcfg $QPKG_NAME Install_Path -f $QPKG_CONF)"

# configuration files
QMVN_SUPPORTED_FILE="$QPKG_INSTALL_PATH/../../.maven/supported_java"
if [ ! -f "$QMVN_SUPPORTED_FILE" ]; then
	/bin/echo ""
	/bin/echo "  Error: the following required file doesn't exist."
	/bin/echo "    $QMVN_SUPPORTED_FILE"
	/bin/echo ""
	# https://stackoverflow.com/a/52012684
	return 2 2>/dev/null
	exit 2
fi

# determine the supported Java-supplying QPKG names (in their preferred order)
SUPPORTED=($("$QMVN_SUPPORTED_FILE"))

#
# DECLARED FUNCTIONS
#

# print usage
usage(){
	/bin/echo ""
	/bin/echo "  Usage:"
	/bin/echo "    source $0"
	/bin/echo "    source $0 <QPKG-NAME>"
	/bin/echo ""
	/bin/echo "  This script is called by /etc/profile which means (beyond other things) that"
	/bin/echo "  whenever you log in to your QNAP, it will set your Java environment for you."
	/bin/echo ""
	/bin/echo "  If the input parameter is specified, environment is set to the given QPKG."
	/bin/echo "  Use this option to override your Java environment for the current session."
	/bin/echo ""
	/bin/echo "  If the input parameter is NOT specified, environment is set to first installed"
	/bin/echo "  QPKG that is also specified in the following file (user-preferred order):"
	/bin/echo "    $QMVN_SUPPORTED_FILE"
	/bin/echo "  Ergo, don't specify any JDK if you'd like to restore your default environment."
	/bin/echo ""
	/bin/echo "  If no QPKG from the above file is installed, environment is NOT set and this "
	/bin/echo "  script will print an error. There is no side effect."
	/bin/echo ""
	/bin/echo "  QPKG names are NOT case sensitive and right now, the following are explicitly"
	/bin/echo "  supported:"
	
	# sort the supported Java-supplying QPKG names
	IFS=$'\n' SUPPORTED_SORTED=($(sort <<<"${SUPPORTED[*]}"))
	unset IFS
	
	# and print them
	for NAME in "${SUPPORTED_SORTED[@]}"; do
		/bin/echo "    - $NAME"
	done
	
	/bin/echo ""
	/bin/echo "  Should you wish to return to using the JRE package, you must disable or remove"
	/bin/echo "  QMaven3 in App Center. While presence of the JRE package is tolerated by QMaven3,"
	/bin/echo "  they are not compatible."
	/bin/echo ""
}

# unset any PATH entry leading to a supported Java QPKG
do_unset(){
	for NAME in "${SUPPORTED[@]}"; do
		export PATH=$(/bin/echo ${PATH} | /bin/awk -v RS=: -v ORS=: "/$NAME/ {next} {print}" | /bin/sed 's/:*$//')
	done
}

# set Java environment to the given Java QPKG (expected to be in upper-case!)
do_set(){
	# assume QPKGs from QNAP Club (manager: Qoolbox; author: Guerithault Stephane)
	# Note: all of them are JDKs (supersets of JREs)
	INSTALL_PATH="$(/sbin/getcfg $1 Install_Path -f $QPKG_CONF)"
	NEW_JAVA_HOME="$INSTALL_PATH"
	NEW_JRE_HOME="$INSTALL_PATH"
	
	# DO set the environment
	if [ $VERBOSE = true ]; then
		/bin/echo ""
		/bin/echo "  Setting Java environment variables..."
		/bin/echo "  --- Target QPKG: $1"
	fi
	export JAVA_HOME="$NEW_JAVA_HOME"
	if [ $VERBOSE = true ]; then
		# this is always the case
		/bin/echo "  --- JAVA_HOME: $JAVA_HOME"
	fi
	export JDK_HOME="$JAVA_HOME"
	if [ $VERBOSE = true ]; then
		/bin/echo "  --- JDK_HOME: $JDK_HOME"
	fi
	export JRE_HOME="$NEW_JRE_HOME"
	if [ $VERBOSE = true ]; then
		/bin/echo "  --- JRE_HOME: $JRE_HOME"
	fi
	export CLASSPATH="$JAVA_HOME/lib"
	if [ $VERBOSE = true ]; then
		/bin/echo "  --- CLASSPATH: $CLASSPATH"
	fi
	export PATH="$PATH:$JAVA_HOME/bin"
	if [ $VERBOSE = true ]; then
		/bin/echo "  --- New PATH: $PATH"
		/bin/echo ""
	fi
}

#
# PARSING OF ARGUMENTS
#

# Taken from:
#	http://stackoverflow.com/a/14203146
# Notes:
#	- Consume one arg per pass: -gt 0
#	- Consume two args per pass: -gt 1
VERBOSE=false
TARGET="" # unset (in case of repeated usage)
while [[ $# -gt 0 ]]
do
	# get and handle the current option
	opt="$1"
	case $opt in
		-h|--help)
			usage
			# https://stackoverflow.com/a/52012684
			return 0 2>/dev/null
			exit 0
			;;
		-v|--verbose)
			VERBOSE=true
			;;
		*)
			# save parameter's value and convert it to upper case
			TARGET=$(/bin/echo "$opt" | /bin/tr '[:lower:]' '[:upper:]')
			;;
	esac
	shift # shift to next option
done

#
# DECISION MAKING
#

# branch depending on whether a target QPKG is defined, and whether it matches one of the supported names (ignoring case)
if [ -z "$TARGET" ]; then
	# set environment to the first installed Java QPKG
	for TARGET in "${SUPPORTED[@]}"; do
		TARGET_INSTALL_PATH="$(/sbin/getcfg $TARGET Install_Path -f $QPKG_CONF)"
		if [ ! -z "$TARGET_INSTALL_PATH" ]; then
			do_unset
			do_set "$TARGET"
			# https://stackoverflow.com/a/52012684
			return 0 2>/dev/null
			exit 0
		fi
	done
	
	# or print an error
	/bin/echo ""
	/bin/echo "  Error: no supported Java QPKG is installed."
	usage
else
	# convert to upper-case
	SUPPORTED_UC=$(/bin/echo "${SUPPORTED[@]}" | /bin/tr '[:lower:]' '[:upper:]')
	
	# branch depending on whether the target QPKG matches any of the supported ones
	if [[ "$SUPPORTED_UC" =~ "$TARGET" ]]; then
		# branch depending on whether the target QPKG is installed
		TARGET_INSTALL_PATH="$(/sbin/getcfg $TARGET Install_Path -f $QPKG_CONF)"
		if [ ! -z "$TARGET_INSTALL_PATH" ]; then
			do_unset
			do_set "$TARGET"
		else
			/bin/echo ""
			/bin/echo "  Error: '$TARGET' is not installed."
			/bin/echo ""
		fi
	else
		/bin/echo ""
		/bin/echo "  Error: '$TARGET' does not match any of the supported Java QPKG names."
		usage
	fi
fi
