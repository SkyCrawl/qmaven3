######################################################################
# REFERENCE OF ALWAYS-AVAILABLE SYSTEM COMMANDS
######################################################################
#CMD_AWK="/bin/awk"
#CMD_CAT="/bin/cat"
#CMD_CHMOD="/bin/chmod"
#CMD_CHOWN="/bin/chown"
#CMD_CP="/bin/cp"
#CMD_CUT="/bin/cut"
#CMD_DATE="/bin/date"
#CMD_ECHO="/bin/echo"
#CMD_EXPR="/usr/bin/expr"
#CMD_FIND="/usr/bin/find"
#CMD_GETCFG="/sbin/getcfg"
#CMD_GREP="/bin/grep"
#CMD_GZIP="/bin/gzip"
#CMD_HOSTNAME="/bin/hostname"
#CMD_LN="/bin/ln"
#CMD_LOG_TOOL="/sbin/log_tool"
#CMD_MD5SUM="/bin/md5sum"
#CMD_MKDIR="/bin/mkdir"
#CMD_MV="/bin/mv"
#CMD_RM="/bin/rm"
#CMD_RMDIR="/bin/rmdir"
#CMD_SED="/bin/sed"
#CMD_SETCFG="/sbin/setcfg"
#CMD_SLEEP="/bin/sleep"
#CMD_SORT="/usr/bin/sort"
#CMD_SYNC="/bin/sync"
#CMD_TAR="/bin/tar"
#CMD_TOUCH="/bin/touch"
#CMD_WGET="/usr/bin/wget"
#CMD_WLOG="/sbin/write_log"
#CMD_XARGS="/usr/bin/xargs"
#CMD_7Z="/usr/local/sbin/7z"

######################################################################
# REFERENCE OF IMPORTANT SYSTEM FILES/VARIABLES
######################################################################
#SYS_CONFIG_DIR="/etc/config"
#SYS_INIT_DIR="/etc/init.d"
#SYS_STARTUP_DIR="/etc/rcS.d"
#SYS_SHUTDOWN_DIR="/etc/rcK.d"
#SYS_RSS_IMG_DIR="/home/httpd/RSS/images"
#SYS_QPKG_DATA_FILE_GZIP="./data.tar.gz"
#SYS_QPKG_DATA_FILE_BZIP2="./data.tar.bz2"
#SYS_QPKG_DATA_FILE_7ZIP="./data.tar.7z"
#SYS_QPKG_DATA_CONFIG_FILE="./conf.tar.gz"
#SYS_QPKG_DATA_MD5SUM_FILE="./md5sum"
#SYS_QPKG_DATA_PACKAGES_FILE="./Packages.gz"
#SYS_QPKG_CONFIG_FILE="$SYS_CONFIG_DIR/qpkg.conf"
#SYS_QPKG_CONF_FIELD_QPKGFILE="QPKG_File"
#SYS_QPKG_CONF_FIELD_NAME="Name"
#SYS_QPKG_CONF_FIELD_VERSION="Version"
#SYS_QPKG_CONF_FIELD_ENABLE="Enable"
#SYS_QPKG_CONF_FIELD_DATE="Date"
#SYS_QPKG_CONF_FIELD_SHELL="Shell"
#SYS_QPKG_CONF_FIELD_INSTALL_PATH="Install_Path"
#SYS_QPKG_CONF_FIELD_CONFIG_PATH="Config_Path"
#SYS_QPKG_CONF_FIELD_WEBUI="WebUI"
#SYS_QPKG_CONF_FIELD_WEBPORT="Web_Port"
#SYS_QPKG_CONF_FIELD_SERVICEPORT="Service_Port"
#SYS_QPKG_CONF_FIELD_SERVICE_PIDFILE="Pid_File"
#SYS_QPKG_CONF_FIELD_AUTHOR="Author"
#SYS_QPKG_CONF_FIELD_RC_NUMBER="RC_Number"
#SYS_EXTRACT_DIR="$(pwd)"

######################################################################
# REFERENCE OF AUTO-ASSIGNED MACHINE-DEPENDENT VARIABLES
######################################################################
#SYS_HOSTNAME=$($CMD_HOSTNAME)

## One of: SYS_QPKG_DATA_FILE_GZIP, SYS_QPKG_DATA_FILE_BZIP2 or SYS_QPKG_DATA_FILE_7ZIP.
#SYS_QPKG_DATA_FILE=""

## Destination volume (e.g. "/share/MD0_DATA").
#SYS_QPKG_BASE=""

## Destination path for all QPKG packages ("$SYS_QPKG_BASE/.qpkg").
#SYS_QPKG_INSTALL_PATH=""

## Destination path for this QPKG package ("$SYS_QPKG_INSTALL_PATH/$QPKG_NAME").
#SYS_QPKG_DIR=""

## Should the QPKG be enabled or disabled after the installation/upgrade? By default, 'TRUE' for installation and the previous state for upgrade operation. If 'TRUE' and start fails, the QPKG is disabled.
#SYS_QPKG_SERVICE_ENABLED="TRUE"

## Architecture of the device the QPKG is installed on.
#SYS_CPU_ARCH=""

## Name and location of system shares
#SYS_PUBLIC_SHARE=""
#SYS_PUBLIC_PATH=""
#SYS_DOWNLOAD_SHARE=""
#SYS_DOWNLOAD_PATH=""
#SYS_MULTIMEDIA_SHARE=""
#SYS_MULTIMEDIA_PATH=""
#SYS_RECORDINGS_SHARE=""
#SYS_RECORDINGS_PATH=""
#SYS_USB_SHARE=""
#SYS_USB_PATH=""
#SYS_WEB_SHARE=""
#SYS_WEB_PATH=""

## Path to ipkg or opkg package tool if installed.
#CMD_PKG_TOOL=""

######################################################################
# REFERENCE OF OUR VARIABLES
######################################################################

## Declare dependencies.
QJDK7_NAME="QJDK7"
QJDK8_NAME="QJDK8"
QJDK9_NAME="QJDK9"
QJDK10_NAME="QJDK10"
QJDK11_NAME="QJDK11"

## Installation log file.
QPKG_LOG_FILE="/var/log/maven-install-tmp.log"

######################################################################
# TIPS & HELPERS
######################################################################
## Useful tips:
# - 'help test' for more information on Shell tests
# - engine ignores any values returned by the principal functions
# - all variables defined in 'qpkg.cfg' are automatically passed
## Useful predefined helper functions:
# - command: log <msg>
#	- outputs <msg> to stdout AND system log
# - command: warn_log <msg>
#	- outputs <msg> to stderr AND system log
# - command: err_log <msg>
#	- outputs <msg> to stderr AND system log
#	- alerts the web interface and prevents the installation/upgrade from proceeding
#	- example: err_log "Data file not found." => "myApp 0.1 installation failed. Data file not found."
# - command: get_share_path <share-name> <variable>
#	- <variable> will now hold real path to the given share (e.g. not '/share/<share-name>')
# - command: add_qpkg_config <config-file> <md5sum>
#	- add a configuration file to '$SYS_QPKG_CONFIG_FILE', if not already present
#	- <md5sum> refers to the file included in the package (should be 0 for dynamically generated files)
# - command: set_qpkg_config <config-file> <md5sum>
#	- update the <md5sum> of an existing configuration file
# - command: extract_data <archive> <directory>
#    - extract the given TAR archive to the given directory ('$SYS_QPKG_DIR' by default)
# - commands: is_equal, is_unequal, is_less_or_equal, is_less, is_greater, is_greater_or_equal
#    - QPKG version comparison - take two arguments (strings) and return 0 if the test is successful

## Usage for the '/sbin/getcfg' command:
# Usage: getcfg section field [ -f profile ] [ -d def_value ] [ -c ] [ -u ]
#	-f profile - Specify the path of the profile
# 	-d def_value - Specify default value to be returned on failure
# 	-c - Section and field names are case sensitive
#	-u - Convert result to upper case

restore_state()
{
	# move the temporary log
	$CMD_MV "$QPKG_LOG_FILE" "$SYS_QPKG_DIR/install.log"
	
	# restore the original IO state
	exec &>/dev/stdout
}

my_exit()
{
	# restore the original IO state
	restore_state
	
	# print the error and exit
	err_log "$1"
}

######################################################################
# OUR PRE-INSTALLATION INITIALIZATION
######################################################################

# NOTES:
# - "$SYS_QPKG_DIR" hasn't been created yet if we're not upgrading

# First entry point.
pkg_init()
{
	# create or truncate the log file
    > "$QPKG_LOG_FILE"
    
    # redirect stdout and stderr of this script to the above log file
    # Note: eventually, restore the original state with 'exec &>/dev/tty'
    exec >> "$QPKG_LOG_FILE"
	exec 2>&1
	
	# time to start logging
	$CMD_ECHO -e "[Initializing...]"
}

# Second entry point. Supposed to check requirements here.
pkg_check_requirement()
{
	# the same requirement is specified in 'qpkg.cfg' but it doesn't hurt to really make sure
	QJDK7_PATH="$($CMD_GETCFG $QJDK7_NAME $SYS_QPKG_CONF_FIELD_INSTALL_PATH -f $SYS_QPKG_CONFIG_FILE)"
	QJDK8_PATH="$($CMD_GETCFG $QJDK8_NAME $SYS_QPKG_CONF_FIELD_INSTALL_PATH -f $SYS_QPKG_CONFIG_FILE)"
	QJDK9_PATH="$($CMD_GETCFG $QJDK9_NAME $SYS_QPKG_CONF_FIELD_INSTALL_PATH -f $SYS_QPKG_CONFIG_FILE)"
	QJDK10_PATH="$($CMD_GETCFG $QJDK10_NAME $SYS_QPKG_CONF_FIELD_INSTALL_PATH -f $SYS_QPKG_CONFIG_FILE)"
	QJDK11_PATH="$($CMD_GETCFG $QJDK11_NAME $SYS_QPKG_CONF_FIELD_INSTALL_PATH -f $SYS_QPKG_CONFIG_FILE)"
	if [[ -z "$QJDK7_PATH" && -z "$QJDK8_PATH" && -z "$QJDK9_PATH" && -z "$QJDK10_PATH" && -z "$QJDK11_PATH" ]]; then
		my_exit "Neither of QJDK 7/8/9/10/11 is installed. See 'https://www.qnapclub.eu/en'."
	else
		$CMD_ECHO -e "--- QJDK 7/8/9/10/11... found"
    fi
}

######################################################################
# OUR INSTALLATION
######################################################################

handle_config_files()
{
	# split into path and filename
	DIR="$(/usr/bin/dirname $1)"
	BASE="$(/usr/bin/basename $1)"
	
	# backup or replace any previous config file
	CNF_CHKSM="$DIR/checksums/$BASE.checksum"
	$CMD_MKDIR -p "$DIR/checksums"
	
	if [ -f "$1" ]; then
		CNF_CHKSM_OLD=$($CMD_CAT "$CNF_CHKSM")
		CNF_CHKSM_NOW=$($CMD_MD5SUM "$1" | /bin/dd count=32 bs=1 2>/dev/null)
		if [[ ! -f "$CNF_CHKSM" || $CNF_CHKSM_OLD != $CNF_CHKSM_NOW ]]; then
			# if manual modifications were made or we don't have a way to compare, backup the old configuration file
			RAND_SEQ=$(/usr/bin/openssl rand -hex 4)
			$CMD_MV "$1" "$1.$RAND_SEQ"
			$CMD_ECHO true
		else
			# if no manual modifications were made, replace the old configuration file
			$CMD_RM "$1"
		fi
	fi
	$CMD_MV "$2" "$1"
	
	# refresh checksum
	$CMD_MD5SUM "$1" | /bin/dd count=32 bs=1 2>/dev/null > "$CNF_CHKSM"
}

# NOTES:
# - "$SYS_QPKG_DIR" has just been created if we're not upgrading
# - data has just been extracted from '$SYS_QPKG_DATA_FILE', if specified
# - configuration files have just been handled

# Third entry point.
pkg_pre_install()
{
	$CMD_ECHO ""
}

# NOTES:
# - shared and platform-dependent files have just been copied to "$SYS_QPKG_DIR"

# Fourth entry point.
pkg_install()
{
	# determine whether we're upgrading the package... we'll likely not use this though
	IS_UPGRADE="$($CMD_GETCFG $QPKG_NAME $SYS_QPKG_CONF_FIELD_NAME -f $SYS_QPKG_CONFIG_FILE)"
	
	cd "$SYS_QPKG_DIR"
	
	$CMD_ECHO -e "[Installing...]"
	
	# declare the persistent directory
	# WARNING: stupid & buggy QDK doesn't set the 'SYS_QPKG_BASE' variable...
	$CMD_ECHO -e "--- Configuration files..."
	MVN_DATA_FOLDER="$SYS_QPKG_INSTALL_PATH/../.maven"
	# if we're upgrading, try to move configuration files first
	if [ ! -z "$IS_UPGRADE" ]; then
		# transition from version 3.5.4-1 to 3.5.4.2
		mv "$SYS_QPKG_INSTALL_PATH/.maven" "$MVN_DATA_FOLDER" 2>/dev/null
	fi
	# if it doesn't exist yet, create directory for the configuration files
	if [ ! -d "$MVN_DATA_FOLDER" ]; then
		$CMD_MKDIR "$MVN_DATA_FOLDER"
	fi
	# if configuration files already exist, keep previous versions and install new
	CNF1=$(handle_config_files "$MVN_DATA_FOLDER/supported_java" "./supported_java")
	CNF2=$(handle_config_files "$MVN_DATA_FOLDER/maven_opts" "./maven_opts")
	CNF3=$(handle_config_files "$MVN_DATA_FOLDER/settings.xml" "./settings.xml")
	if [[ $CNF1 = true || $CNF2 = true || $CNF3 = true ]]; then
		# if user HAS made modifications to the configuration file
		warn_log "QMaven3: Some manual actions are needed. Please read 'https://github.com/SkyCrawl/qmaven3/tree/3.5.4-1#upgrading'."
	fi
	
	# extract and install the bundled distribution
	$CMD_ECHO -e "\n[Distribution...]"
	$CMD_TAR -xvf "lib/apache-maven-3.5.4-bin.tar.gz"
	$CMD_MV "apache-maven-3.5.4" "mvn-3.5.4"
	
	# symlink the global settings file from within MAVEN_HOME
	$CMD_MKDIR -p "./mvn-3.5.4/conf"
	$CMD_LN -sf "$MVN_DATA_FOLDER/settings.xml" "./mvn-3.5.4/conf/settings.xml"
	
	# cleanup
	$CMD_RM -rf "lib"
	
	# and finally, we're done...
	$CMD_ECHO -e "\nInstallation finished."
}

# NOTES:
# - obsolete files from the previous installation have just been removed
# - icons have just been copied from QPKG to "/home/httpd/RSS/images/"
# - symbolic links for the service program have just been created in "/etc/init.d", "/etc/rcS.d" and "/etc/rcK.d"
# - the QPKG has just been registered in "/etc/config/qpkg.conf"

pkg_post_install()
{
	restore_state
}

######################################################################
# OUR UN-INSTALLATION
######################################################################

# NOTES:
# - The following functions have a generic implementation included in the engine.
# - Variables must be used as "\$VAR" (otherwise, their values will be replaced when the uninstall script is created).
# - Command substitutions ("$(command)" or "`command`") must be escaped, otherwise they will be executed before the script is created.

# PKG_PRE_REMOVE="
# {
# }"
# PKG_MAIN_REMOVE="
# {
#    # remove the generated configuration file
#    \$CMD_RM ~/settings.xml
# }"
# PKG_POST_REMOVE="
# {
# }"
